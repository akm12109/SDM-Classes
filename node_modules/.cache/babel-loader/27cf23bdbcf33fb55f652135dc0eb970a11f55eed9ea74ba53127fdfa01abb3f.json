{"ast":null,"code":"// src/AuthContext.js\nimport React,{createContext,useContext,useEffect,useState}from'react';import{auth}from'./firebaseConfig';// Import firebase authentication\nimport{onAuthStateChanged}from'firebase/auth';import{jsxs as _jsxs}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Create context\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);// Initialize user state\nconst[loading,setLoading]=useState(true);// Initialize loading state\nuseEffect(()=>{const unsubscribe=onAuthStateChanged(auth,currentUser=>{setUser(currentUser);// Set user if authenticated\nsetLoading(false);// Stop loading after checking auth state\n});return()=>unsubscribe();// Clean up the listener on unmount\n},[]);// Provide user and loading state\nreturn/*#__PURE__*/_jsxs(AuthContext.Provider,{value:{user,loading},children:[!loading&&children,\" \"]});};export const useAuth=()=>useContext(AuthContext);// Hook to use auth context","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","auth","onAuthStateChanged","jsxs","_jsxs","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","unsubscribe","currentUser","Provider","value","useAuth"],"sources":["/workspaces/SDM-Classes/src/AuthContext.js"],"sourcesContent":["// src/AuthContext.js\r\nimport React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { auth } from './firebaseConfig'; // Import firebase authentication\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\n\r\nconst AuthContext = createContext(); // Create context\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null); // Initialize user state\r\n  const [loading, setLoading] = useState(true); // Initialize loading state\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\r\n      setUser(currentUser); // Set user if authenticated\r\n      setLoading(false); // Stop loading after checking auth state\r\n    });\r\n\r\n    return () => unsubscribe(); // Clean up the listener on unmount\r\n  }, []);\r\n\r\n  // Provide user and loading state\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading }}>\r\n      {!loading && children} {/* Render children only after loading */}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext); // Hook to use auth context\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC7E,OAASC,IAAI,KAAQ,kBAAkB,CAAE;AACzC,OAASC,kBAAkB,KAAQ,eAAe,CAAC,OAAAC,IAAA,IAAAC,KAAA,yBAEnD,KAAM,CAAAC,WAAW,cAAGR,aAAa,CAAC,CAAC,CAAE;AAErC,MAAO,MAAM,CAAAS,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAAE;AACxC,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAE;AAE9CD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAc,WAAW,CAAGX,kBAAkB,CAACD,IAAI,CAAGa,WAAW,EAAK,CAC5DJ,OAAO,CAACI,WAAW,CAAC,CAAE;AACtBF,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CAAC,CAAC,CAEF,MAAO,IAAMC,WAAW,CAAC,CAAC,CAAE;AAC9B,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,mBACET,KAAA,CAACC,WAAW,CAACU,QAAQ,EAACC,KAAK,CAAE,CAAEP,IAAI,CAAEE,OAAQ,CAAE,CAAAH,QAAA,EAC5C,CAACG,OAAO,EAAIH,QAAQ,CAAC,GAAC,EACH,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAS,OAAO,CAAGA,CAAA,GAAMnB,UAAU,CAACO,WAAW,CAAC,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}